// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE

import * as List from "bs-platform/lib/es6/list.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Chess from "./Chess.bs.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Printf from "bs-platform/lib/es6/printf.js";
import * as Tea_cmd from "bucklescript-tea/src-ocaml/tea_cmd.js";
import * as Tea_sub from "bucklescript-tea/src-ocaml/tea_sub.js";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.js";
import * as Tea_html from "bucklescript-tea/src-ocaml/tea_html.js";
import * as Tea_json from "bucklescript-tea/src-ocaml/tea_json.js";
import * as Tea_mouse from "bucklescript-tea/src-ocaml/tea_mouse.js";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as Caml_int32 from "bs-platform/lib/es6/caml_int32.js";
import * as Js_primitive from "bs-platform/lib/es6/js_primitive.js";
import * as Caml_builtin_exceptions from "bs-platform/lib/es6/caml_builtin_exceptions.js";

function dragging(param_0) {
  return /* Dragging */Block.__(0, [param_0]);
}

function promoting(param_0) {
  return /* Promoting */Block.__(1, [param_0]);
}

function interactable(param_0, param_1) {
  return /* Interactable */[
          param_0,
          param_1
        ];
}

function move_drag(param_0) {
  return /* Move_drag */Block.__(1, [param_0]);
}

function move_drop(param_0) {
  return /* Move_drop */Block.__(2, [param_0]);
}

function square_entered(param_0) {
  return /* Square_entered */Block.__(3, [param_0]);
}

function square_left(param_0) {
  return /* Square_left */Block.__(4, [param_0]);
}

function piece_promoted(param_0) {
  return /* Piece_promoted */Block.__(5, [param_0]);
}

function internal_msg(param_0) {
  return /* Internal_msg */Block.__(0, [param_0]);
}

function move(param_0) {
  return /* Move */Block.__(1, [param_0]);
}

var flip_button_view = Tea_html.button(undefined, undefined, /* :: */[
      Tea_html.onClick(/* Internal_msg */Block.__(0, [/* Flip_board */0])),
      /* [] */0
    ], /* :: */[
      Tea_html.text("Flip board"),
      /* [] */0
    ]);

function cartesian_decoder(field_x, field_y) {
  return Tea_json.Decoder[/* map2 */17]((function (x, y) {
                return /* record */[
                        /* x */x,
                        /* y */y
                      ];
              }), Tea_json.Decoder[/* field */11](field_x, Tea_json.Decoder[/* int */3]), Tea_json.Decoder[/* field */11](field_y, Tea_json.Decoder[/* int */3]));
}

var partial_arg = cartesian_decoder("pageX", "pageY");

var partial_arg$1 = Tea_json.Decoder[/* decodeEvent */31];

function page(param) {
  return partial_arg$1(partial_arg, param);
}

var size = Tea_json.Decoder[/* field */11]("clientWidth", Tea_json.Decoder[/* int */3]);

var partial_arg$2 = Tea_json.Decoder[/* map3 */18]((function (a, b, c) {
        return /* tuple */[
                a,
                b,
                c
              ];
      }), cartesian_decoder("offsetX", "offsetY"), cartesian_decoder("pageX", "pageY"), Tea_json.Decoder[/* field */11]("target", size));

var partial_arg$3 = Tea_json.Decoder[/* decodeEvent */31];

function offset_page_size(param) {
  return partial_arg$3(partial_arg$2, param);
}

function handler(decoder, msg, $$event) {
  var match = Curry._1(decoder, $$event);
  if (match.tag) {
    return undefined;
  } else {
    return Js_primitive.some(Curry._1(msg, match[0]));
  }
}

function filter_targets(source, moves) {
  return List.map((function (param) {
                return /* tuple */[
                        param[0][1],
                        param[1]
                      ];
              }), List.filter((function (param) {
                      return Caml_obj.caml_equal(param[0][0], source);
                    }))(moves));
}

function completed_move(move) {
  if (typeof move === "number" || move.tag !== 1) {
    return /* Completed_move */[move];
  } else {
    return /* Pawn_will_promote */0;
  }
}

function coordinate_pairs(turn, move) {
  return /* tuple */[
          Chess.coordinate_pairs(turn, move),
          completed_move(move)
        ];
}

function move_start(interactable) {
  if (interactable) {
    var legal_moves = interactable[1];
    var turn = interactable[0];
    return /* tuple */[
            turn,
            (function (file, rank, param) {
                var coordinates = param[1];
                return /* Internal_msg */Block.__(0, [/* Move_start */Block.__(0, [/* record */[
                                /* turn */turn,
                                /* source : tuple */[
                                  file,
                                  rank
                                ],
                                /* target */undefined,
                                /* legal_targets */filter_targets(/* tuple */[
                                      file,
                                      rank
                                    ], List.map((function (param) {
                                            return coordinate_pairs(turn, param);
                                          }), legal_moves)),
                                /* initial */coordinates,
                                /* offset */param[0],
                                /* coordinates */coordinates,
                                /* size */param[2]
                              ]])]);
              })
          ];
  }
  
}

function board_view(interactable, pos_ar, model) {
  var match = model[/* orientation */0];
  var match$1 = match ? /* tuple */[
      /* :: */[
        0,
        /* :: */[
          1,
          /* :: */[
            2,
            /* :: */[
              3,
              /* :: */[
                4,
                /* :: */[
                  5,
                  /* :: */[
                    6,
                    /* :: */[
                      7,
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      /* :: */[
        7,
        /* :: */[
          6,
          /* :: */[
            5,
            /* :: */[
              4,
              /* :: */[
                3,
                /* :: */[
                  2,
                  /* :: */[
                    1,
                    /* :: */[
                      0,
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ] : /* tuple */[
      /* :: */[
        7,
        /* :: */[
          6,
          /* :: */[
            5,
            /* :: */[
              4,
              /* :: */[
                3,
                /* :: */[
                  2,
                  /* :: */[
                    1,
                    /* :: */[
                      0,
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      /* :: */[
        0,
        /* :: */[
          1,
          /* :: */[
            2,
            /* :: */[
              3,
              /* :: */[
                4,
                /* :: */[
                  5,
                  /* :: */[
                    6,
                    /* :: */[
                      7,
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ];
  var files = match$1[0];
  var drag_transform = function (drag) {
    return Tea_html.style("transform", Curry._2(Printf.sprintf(/* Format */[
                        /* String_literal */Block.__(11, [
                            "translate(",
                            /* Int */Block.__(4, [
                                /* Int_d */0,
                                /* No_padding */0,
                                /* No_precision */0,
                                /* String_literal */Block.__(11, [
                                    "px,",
                                    /* Int */Block.__(4, [
                                        /* Int_d */0,
                                        /* No_padding */0,
                                        /* No_precision */0,
                                        /* String_literal */Block.__(11, [
                                            "px)",
                                            /* End_of_format */0
                                          ])
                                      ])
                                  ])
                              ])
                          ]),
                        "translate(%dpx,%dpx)"
                      ]), ((drag[/* offset */5][/* x */0] - (drag[/* size */7] / 2 | 0) | 0) + drag[/* coordinates */6][/* x */0] | 0) - drag[/* initial */4][/* x */0] | 0, ((drag[/* offset */5][/* y */1] - (drag[/* size */7] / 2 | 0) | 0) + drag[/* coordinates */6][/* y */1] | 0) - drag[/* initial */4][/* y */1] | 0));
  };
  var target_highlight = function (drag, target) {
    var match = drag[/* target */2];
    if (match !== undefined && Caml_obj.caml_equal(match, target)) {
      return true;
    } else {
      return false;
    }
  };
  var legal_highlight = function (drag, target) {
    return List.exists((function (param) {
                  return Caml_obj.caml_equal(param[0], target);
                }), drag[/* legal_targets */3]);
  };
  var rank_view = function (rank) {
    return Tea_html.node(undefined, "cb-row", undefined, undefined, /* [] */0, List.map((function (param) {
                      var rank$1 = rank;
                      var file = param;
                      var match = Caml_array.caml_array_get(Caml_array.caml_array_get(pos_ar, file), rank$1);
                      var match$1;
                      if (match) {
                        var match$2 = match[0];
                        var color = match$2[1];
                        var match$3 = model[/* state */1];
                        var match$4;
                        if (typeof match$3 === "number" || match$3.tag) {
                          match$4 = /* tuple */[
                            false,
                            Tea_html.noProp
                          ];
                        } else {
                          var drag = match$3[0];
                          match$4 = Caml_obj.caml_equal(/* tuple */[
                                file,
                                rank$1
                              ], drag[/* source */1]) ? /* tuple */[
                              true,
                              drag_transform(drag)
                            ] : /* tuple */[
                              false,
                              Tea_html.noProp
                            ];
                        }
                        var match$5 = move_start(interactable);
                        var tmp;
                        if (match$5 !== undefined) {
                          var match$6 = match$5;
                          if (color === match$6[0]) {
                            var partial_arg = Curry._2(match$6[1], file, rank$1);
                            tmp = Tea_html.onCB("mousedown", "", (function (param) {
                                    return handler(offset_page_size, partial_arg, param);
                                  }));
                          } else {
                            tmp = Tea_html.noProp;
                          }
                        } else {
                          tmp = Tea_html.noProp;
                        }
                        match$1 = /* tuple */[
                          Tea_html.node(undefined, "cb-piece", undefined, undefined, /* :: */[
                                match$4[1],
                                /* :: */[
                                  Tea_html.classList(/* :: */[
                                        /* tuple */[
                                          Chess.string_of_color(color),
                                          true
                                        ],
                                        /* :: */[
                                          /* tuple */[
                                            Chess.string_of_piece_type(match$2[0]),
                                            true
                                          ],
                                          /* :: */[
                                            /* tuple */[
                                              "dragged",
                                              match$4[0]
                                            ],
                                            /* [] */0
                                          ]
                                        ]
                                      ]),
                                  /* [] */0
                                ]
                              ], /* [] */0),
                          tmp
                        ];
                      } else {
                        match$1 = /* tuple */[
                          Tea_html.noNode,
                          Tea_html.noProp
                        ];
                      }
                      var match$7 = model[/* state */1];
                      var tmp$1;
                      var exit = 0;
                      if (typeof match$7 === "number" || match$7.tag) {
                        exit = 1;
                      } else {
                        var drag$1 = match$7[0];
                        tmp$1 = /* :: */[
                          Tea_html.classList(/* :: */[
                                /* tuple */[
                                  "destination",
                                  legal_highlight(drag$1, /* tuple */[
                                        file,
                                        rank$1
                                      ])
                                ],
                                /* :: */[
                                  /* tuple */[
                                    "hovering",
                                    target_highlight(drag$1, /* tuple */[
                                          file,
                                          rank$1
                                        ])
                                  ],
                                  /* [] */0
                                ]
                              ]),
                          /* :: */[
                            Tea_html.onMouseEnter(/* Internal_msg */Block.__(0, [/* Square_entered */Block.__(3, [/* tuple */[
                                          file,
                                          rank$1
                                        ]])])),
                            /* :: */[
                              Tea_html.onMouseLeave(/* Internal_msg */Block.__(0, [/* Square_left */Block.__(4, [/* tuple */[
                                            file,
                                            rank$1
                                          ]])])),
                              /* [] */0
                            ]
                          ]
                        ];
                      }
                      if (exit === 1) {
                        tmp$1 = /* :: */[
                          Tea_html.noProp,
                          /* :: */[
                            Tea_html.noProp,
                            /* :: */[
                              Tea_html.noProp,
                              /* [] */0
                            ]
                          ]
                        ];
                      }
                      return Tea_html.node(undefined, "cb-square", undefined, undefined, /* :: */[
                                  match$1[1],
                                  tmp$1
                                ], /* :: */[
                                  match$1[0],
                                  /* [] */0
                                ]);
                    }), files));
  };
  return Tea_html.node(undefined, "cb-board", undefined, undefined, /* [] */0, List.map(rank_view, match$1[1]));
}

function view(interactable, pos_ar, model) {
  var promo_view = function (promoting) {
    var file = promoting[/* target_file */2];
    var match = model[/* orientation */0];
    var match$1 = promoting[/* turn */0];
    var match$2 = match ? (
        match$1 ? /* tuple */[
            file,
            /* :: */[
              0,
              /* :: */[
                1,
                /* :: */[
                  2,
                  /* :: */[
                    3,
                    /* [] */0
                  ]
                ]
              ]
            ]
          ] : /* tuple */[
            file,
            /* :: */[
              7,
              /* :: */[
                6,
                /* :: */[
                  5,
                  /* :: */[
                    4,
                    /* [] */0
                  ]
                ]
              ]
            ]
          ]
      ) : (
        match$1 ? /* tuple */[
            7 - file | 0,
            /* :: */[
              7,
              /* :: */[
                6,
                /* :: */[
                  5,
                  /* :: */[
                    4,
                    /* [] */0
                  ]
                ]
              ]
            ]
          ] : /* tuple */[
            7 - file | 0,
            /* :: */[
              0,
              /* :: */[
                1,
                /* :: */[
                  2,
                  /* :: */[
                    3,
                    /* [] */0
                  ]
                ]
              ]
            ]
          ]
      );
    var left = match$2[0];
    var promo_piece_view = function (param) {
      var piece_type = param[1];
      return Tea_html.node(undefined, "cb-square", undefined, undefined, /* :: */[
                  Tea_html.onClick(/* Internal_msg */Block.__(0, [/* Piece_promoted */Block.__(5, [piece_type])])),
                  /* :: */[
                    Tea_html.styles(/* :: */[
                          /* tuple */[
                            "left",
                            Curry._1(Printf.sprintf(/* Format */[
                                      /* Int */Block.__(4, [
                                          /* Int_d */0,
                                          /* No_padding */0,
                                          /* No_precision */0,
                                          /* String_literal */Block.__(11, [
                                              "px",
                                              /* End_of_format */0
                                            ])
                                        ]),
                                      "%dpx"
                                    ]), Caml_int32.imul(left, promoting[/* size */3]))
                          ],
                          /* :: */[
                            /* tuple */[
                              "top",
                              Curry._1(Printf.sprintf(/* Format */[
                                        /* Int */Block.__(4, [
                                            /* Int_d */0,
                                            /* No_padding */0,
                                            /* No_precision */0,
                                            /* String_literal */Block.__(11, [
                                                "px",
                                                /* End_of_format */0
                                              ])
                                          ]),
                                        "%dpx"
                                      ]), Caml_int32.imul(param[0], promoting[/* size */3]))
                            ],
                            /* [] */0
                          ]
                        ]),
                    /* [] */0
                  ]
                ], /* :: */[
                  Tea_html.node(undefined, "cb-piece", undefined, undefined, /* :: */[
                        Tea_html.classList(/* :: */[
                              /* tuple */[
                                Chess.string_of_color(promoting[/* turn */0]),
                                true
                              ],
                              /* :: */[
                                /* tuple */[
                                  Chess.string_of_piece_type(piece_type),
                                  true
                                ],
                                /* [] */0
                              ]
                            ]),
                        /* [] */0
                      ], /* [] */0),
                  /* [] */0
                ]);
    };
    return Tea_html.node(undefined, "cb-promo", undefined, undefined, /* :: */[
                Tea_html.onClick(/* Internal_msg */Block.__(0, [/* Promotion_canceled */1])),
                /* [] */0
              ], List.map(promo_piece_view, List.combine(match$2[1], /* :: */[
                        /* Queen */1,
                        /* :: */[
                          /* Knight */4,
                          /* :: */[
                            /* Rook */2,
                            /* :: */[
                              /* Bishop */3,
                              /* [] */0
                            ]
                          ]
                        ]
                      ])));
  };
  var match = model[/* state */1];
  var tmp;
  tmp = typeof match === "number" || !match.tag ? Tea_html.noNode : promo_view(match[0]);
  return Tea_html.node(undefined, "cb-wrap", undefined, undefined, /* [] */0, /* :: */[
              tmp,
              /* :: */[
                board_view(interactable, pos_ar, model),
                /* [] */0
              ]
            ]);
}

function update(model, param) {
  if (param.tag) {
    return /* tuple */[
            model,
            Tea_cmd.none
          ];
  } else {
    var msg = param[0];
    var match = model[/* state */1];
    if (typeof msg === "number") {
      if (msg === 0) {
        return /* tuple */[
                /* record */[
                  /* orientation */Chess.opposite_color(model[/* orientation */0]),
                  /* state */model[/* state */1]
                ],
                Tea_cmd.none
              ];
      } else {
        return /* tuple */[
                /* record */[
                  /* orientation */model[/* orientation */0],
                  /* state : Nothing */0
                ],
                Tea_cmd.none
              ];
      }
    } else {
      switch (msg.tag | 0) {
        case 0 : 
            return /* tuple */[
                    /* record */[
                      /* orientation */model[/* orientation */0],
                      /* state : Dragging */Block.__(0, [msg[0]])
                    ],
                    Tea_cmd.none
                  ];
        case 1 : 
            if (typeof match === "number" || match.tag) {
              return /* tuple */[
                      model,
                      Tea_cmd.none
                    ];
            } else {
              var drag = match[0];
              return /* tuple */[
                      /* record */[
                        /* orientation */model[/* orientation */0],
                        /* state : Dragging */Block.__(0, [/* record */[
                              /* turn */drag[/* turn */0],
                              /* source */drag[/* source */1],
                              /* target */drag[/* target */2],
                              /* legal_targets */drag[/* legal_targets */3],
                              /* initial */drag[/* initial */4],
                              /* offset */drag[/* offset */5],
                              /* coordinates */msg[0],
                              /* size */drag[/* size */7]
                            ]])
                      ],
                      Tea_cmd.none
                    ];
            }
        case 2 : 
            if (typeof match === "number" || match.tag) {
              return /* tuple */[
                      model,
                      Tea_cmd.none
                    ];
            } else {
              var drag$1 = match[0];
              console.log(drag$1);
              var match$1 = drag$1[/* target */2];
              if (match$1 !== undefined) {
                var target = match$1;
                try {
                  var match$2 = List.assoc(target, drag$1[/* legal_targets */3]);
                  if (match$2) {
                    return /* tuple */[
                            /* record */[
                              /* orientation */model[/* orientation */0],
                              /* state : Nothing */0
                            ],
                            Tea_cmd.msg(/* Move */Block.__(1, [match$2[0]]))
                          ];
                  } else {
                    return /* tuple */[
                            /* record */[
                              /* orientation */model[/* orientation */0],
                              /* state : Promoting */Block.__(1, [/* record */[
                                    /* turn */drag$1[/* turn */0],
                                    /* source_file */drag$1[/* source */1][0],
                                    /* target_file */target[0],
                                    /* size */drag$1[/* size */7]
                                  ]])
                            ],
                            Tea_cmd.none
                          ];
                  }
                }
                catch (exn){
                  if (exn === Caml_builtin_exceptions.not_found) {
                    return /* tuple */[
                            /* record */[
                              /* orientation */model[/* orientation */0],
                              /* state : Nothing */0
                            ],
                            Tea_cmd.none
                          ];
                  } else {
                    throw exn;
                  }
                }
              } else {
                return /* tuple */[
                        /* record */[
                          /* orientation */model[/* orientation */0],
                          /* state : Nothing */0
                        ],
                        Tea_cmd.none
                      ];
              }
            }
        case 3 : 
            if (typeof match === "number" || match.tag) {
              return /* tuple */[
                      model,
                      Tea_cmd.none
                    ];
            } else {
              var drag$2 = match[0];
              return /* tuple */[
                      /* record */[
                        /* orientation */model[/* orientation */0],
                        /* state : Dragging */Block.__(0, [/* record */[
                              /* turn */drag$2[/* turn */0],
                              /* source */drag$2[/* source */1],
                              /* target */msg[0],
                              /* legal_targets */drag$2[/* legal_targets */3],
                              /* initial */drag$2[/* initial */4],
                              /* offset */drag$2[/* offset */5],
                              /* coordinates */drag$2[/* coordinates */6],
                              /* size */drag$2[/* size */7]
                            ]])
                      ],
                      Tea_cmd.none
                    ];
            }
        case 4 : 
            if (typeof match === "number" || match.tag) {
              return /* tuple */[
                      model,
                      Tea_cmd.none
                    ];
            } else {
              var drag$3 = match[0];
              return /* tuple */[
                      /* record */[
                        /* orientation */model[/* orientation */0],
                        /* state : Dragging */Block.__(0, [/* record */[
                              /* turn */drag$3[/* turn */0],
                              /* source */drag$3[/* source */1],
                              /* target */undefined,
                              /* legal_targets */drag$3[/* legal_targets */3],
                              /* initial */drag$3[/* initial */4],
                              /* offset */drag$3[/* offset */5],
                              /* coordinates */drag$3[/* coordinates */6],
                              /* size */drag$3[/* size */7]
                            ]])
                      ],
                      Tea_cmd.none
                    ];
            }
        case 5 : 
            if (typeof match === "number" || !match.tag) {
              return /* tuple */[
                      model,
                      Tea_cmd.none
                    ];
            } else {
              var promoting = match[0];
              var move_000 = msg[0];
              var move_001 = promoting[/* source_file */1];
              var move_002 = promoting[/* target_file */2];
              var move = /* Promotion */Block.__(1, [
                  move_000,
                  move_001,
                  move_002
                ]);
              return /* tuple */[
                      /* record */[
                        /* orientation */model[/* orientation */0],
                        /* state : Nothing */0
                      ],
                      Tea_cmd.msg(/* Move */Block.__(1, [move]))
                    ];
            }
        
      }
    }
  }
}

function subscriptions(model) {
  var match = model[/* state */1];
  if (typeof match === "number" || match.tag) {
    return Tea_sub.none;
  } else {
    return Tea_sub.batch(/* :: */[
                Tea_mouse.moves(undefined, (function (x) {
                        return /* Internal_msg */Block.__(0, [/* Move_drag */Block.__(1, [x])]);
                      })),
                /* :: */[
                  Tea_mouse.ups(undefined, (function (x) {
                          return /* Internal_msg */Block.__(0, [/* Move_drop */Block.__(2, [x])]);
                        })),
                  /* [] */0
                ]
              ]);
  }
}

var nothing = /* Nothing */0;

var not_interactable = /* Not_interactable */0;

var flip_board = /* Flip_board */0;

var promotion_canceled = /* Promotion_canceled */1;

var init = /* record */[
  /* orientation : White */1,
  /* state : Nothing */0
];

export {
  dragging ,
  promoting ,
  nothing ,
  not_interactable ,
  interactable ,
  flip_board ,
  move_drag ,
  move_drop ,
  square_entered ,
  square_left ,
  promotion_canceled ,
  piece_promoted ,
  internal_msg ,
  move ,
  init ,
  flip_button_view ,
  cartesian_decoder ,
  page ,
  offset_page_size ,
  handler ,
  filter_targets ,
  completed_move ,
  coordinate_pairs ,
  move_start ,
  board_view ,
  view ,
  update ,
  subscriptions ,
  
}
/* flip_button_view Not a pure module */
