// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE

import * as List from "bs-platform/lib/es6/list.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Board from "./Board.bs.js";
import * as Chess from "./Chess.bs.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Printf from "bs-platform/lib/es6/printf.js";
import * as Tea_app from "bucklescript-tea/src-ocaml/tea_app.js";
import * as Tea_cmd from "bucklescript-tea/src-ocaml/tea_cmd.js";
import * as Tea_sub from "bucklescript-tea/src-ocaml/tea_sub.js";
import * as Tea_html from "bucklescript-tea/src-ocaml/tea_html.js";
import * as Tea_random from "bucklescript-tea/src-ocaml/tea_random.js";

function board_msg(param_0) {
  return /* Board_msg */Block.__(0, [param_0]);
}

function random_move(param_0) {
  return /* Random_move */Block.__(1, [param_0]);
}

function init() {
  return /* tuple */[
          /* record */[
            /* position */Chess.init_position,
            /* board */Board.init
          ],
          Tea_cmd.none
        ];
}

function update(model, param) {
  if (typeof param === "number") {
    var match = Chess.game_status(model[/* position */0]);
    var tmp;
    if (typeof match === "number" || !match.tag) {
      tmp = Tea_cmd.none;
    } else {
      var move_list = match[0];
      tmp = Tea_random.generate((function (random_number) {
              return /* Random_move */Block.__(1, [List.nth(move_list, random_number)]);
            }), Tea_random.$$int(0, List.length(move_list)));
    }
    return /* tuple */[
            model,
            tmp
          ];
  } else if (param.tag) {
    var position = Chess.make_move(model[/* position */0], param[0], 0);
    return /* tuple */[
            /* record */[
              /* position */position,
              /* board */model[/* board */1]
            ],
            Tea_cmd.none
          ];
  } else {
    var msg = param[0];
    if (msg.tag) {
      var position$1 = Chess.make_move(model[/* position */0], msg[0], 0);
      return /* tuple */[
              /* record */[
                /* position */position$1,
                /* board */model[/* board */1]
              ],
              Tea_cmd.none
            ];
    } else {
      var match$1 = Board.update(model[/* board */1], msg);
      return /* tuple */[
              /* record */[
                /* position */model[/* position */0],
                /* board */match$1[0]
              ],
              Tea_cmd.map(board_msg, match$1[1])
            ];
    }
  }
}

function view(model) {
  var match = Chess.game_status(model[/* position */0]);
  var interactable;
  interactable = typeof match === "number" || !match.tag ? /* Not_interactable */0 : /* Interactable */[
      model[/* position */0][/* turn */1],
      match[0]
    ];
  var match$1 = model[/* position */0][/* turn */1];
  return Tea_html.div(undefined, undefined, /* [] */0, /* :: */[
              Tea_app.map(board_msg, Board.view(interactable, model[/* position */0][/* ar */0], model[/* board */1])),
              /* :: */[
                Tea_html.p(undefined, undefined, /* [] */0, /* :: */[
                      Tea_html.text(Curry._2(Printf.sprintf(/* Format */[
                                    /* String_literal */Block.__(11, [
                                        "Move ",
                                        /* Int */Block.__(4, [
                                            /* Int_d */0,
                                            /* No_padding */0,
                                            /* No_precision */0,
                                            /* String_literal */Block.__(11, [
                                                ".  It is ",
                                                /* String */Block.__(2, [
                                                    /* No_padding */0,
                                                    /* String_literal */Block.__(11, [
                                                        "'s move.",
                                                        /* End_of_format */0
                                                      ])
                                                  ])
                                              ])
                                          ])
                                      ]),
                                    "Move %d.  It is %s's move."
                                  ]), model[/* position */0][/* number */9], match$1 ? "White" : "Black")),
                      /* [] */0
                    ]),
                /* :: */[
                  Tea_html.p(undefined, undefined, /* [] */0, /* :: */[
                        Tea_app.map(board_msg, Board.flip_button_view),
                        /* :: */[
                          Tea_html.button(undefined, undefined, /* :: */[
                                Tea_html.onClick(/* Random_button */0),
                                /* [] */0
                              ], /* :: */[
                                Tea_html.text("Make a random move!"),
                                /* [] */0
                              ]),
                          /* [] */0
                        ]
                      ]),
                  /* [] */0
                ]
              ]
            ]);
}

function subscriptions(model) {
  return Tea_sub.map(board_msg, Board.subscriptions(model[/* board */1]));
}

var partial_arg = /* record */[
  /* init */init,
  /* update */update,
  /* view */view,
  /* subscriptions */subscriptions
];

function main(param, param$1) {
  return Tea_app.standardProgram(partial_arg, param, param$1);
}

var random_button = /* Random_button */0;

export {
  board_msg ,
  random_button ,
  random_move ,
  init ,
  update ,
  view ,
  subscriptions ,
  main ,
  
}
/* Board Not a pure module */
